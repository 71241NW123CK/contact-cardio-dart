import 'dart:math';

import 'package:contact_cardio/contact_cardio.dart';
import 'package:test/test.dart';

void main() {
  group('MeCard tests', () {
    test('MeCard test', () {
      List<String> componentList = [];
      const familyName = 'McStr8';
      const givenName = 'Hetero';
      componentList.add('N:$familyName,$givenName;');
      const familyReading = 'マックストレット';
      const givenReading = 'ヘテロ';
      componentList.add('SOUND:$familyReading,$givenReading;');
      const tel0 = '18084206969';
      componentList.add('TEL:$tel0;');
      const tel1 = '15555555555';
      componentList.add('TEL:$tel1;');
      const telAv = '19006666969';
      componentList.add('TEL-AV:$telAv;');
      const email0 = 'backward6@gmail.com';
      componentList.add('EMAIL:$email0;');
      const email1 = 'cola.pippu@gmail.com';
      componentList.add('EMAIL:$email1;');
      const memo = 'Howdy, my name is Rawhide Kobayashi. I\'m a 27 year old Japanese Japamerican (western culture fan for you foreigners). I brand and wrangle cattle on my ranch, and spend my days perfecting the craft and enjoying superior American passtimes. (Barbeque, Rodeo, Fireworks) I train with my branding iron every day, this superior weapon can permanently leave my ranch embled on a cattle\'s hide because it is white-hot, and is vastly superior to any other method of livestock marking. I earned my branding license two years ago, and I have been getting better every day. I speak English fluently, both Texas and Oklahoma dialect, and I write fluently as well. I know everything about American history and their cowboy code, which I follow 100% When I get my American visa, I am moving to Dallas to work in an oil field to learn more about their magnificent culture. I hope I can become a cattle wrangler for the Double Cross Ranch or an oil rig operator for Exxon-Mobil! I own several cowboy hats, which I wear around town. I want to get used to wearing them before I move to America, so I can fit in easier. I rebel against my elders and seniors and speak English as often as I can, but rarely does anyone manage to respond. Wish me luck in America!';
      componentList.add('NOTE:$memo;');
      const birthdayYearString = '1969';
      final birthdayYear = int.tryParse(birthdayYearString);
      const birthdayMonthString = '04';
      final birthdayMonth = int.tryParse(birthdayMonthString);
      const birthdayDayString = '20';
      final birthdayDay = int.tryParse(birthdayDayString);
      const birthday = '$birthdayYearString$birthdayMonthString$birthdayDayString';
      componentList.add('BDAY:$birthday;');
      const address0RoomNumber = 'Smoking Room';
      const address0HouseNumber = '420 Pakalolo Circle';
      const address0City = 'Honolulu';
      const address0Country = 'Kingdom of Hawaiʻi';
      componentList.add('ADR:,$address0RoomNumber,$address0HouseNumber,$address0City,,,$address0Country;');
      const address1RoomNumber = 'Poker Room';
      const address1HouseNumber = '45000 Pechanga Pkwy';
      const address1City = 'Temecula';
      const address1State = 'CA';
      const address1ZipCode = '92592';
      const address1Country = 'United States of America';
      componentList.add('ADR:,$address1RoomNumber,$address1HouseNumber,$address1City,$address1State,$address1ZipCode,$address1Country;');
      const url0 = 'https://www.google.com/';
      componentList.add('URL:$url0;');
      const url1 = 'https://github.com/71241NW123CK/';
      componentList.add('URL:$url1;');
      const nickname = 'Rawhide Kobayashi';
      componentList.add('NICKNAME:$nickname;');
      final serializedMeCard = 'MECARD:${componentList.join()};';
      void verifyMeCard(MeCardContactCard c) {
        expect(c, isNotNull);
        expect(c.nameFamilyName, equals(familyName));
        expect(c.nameGivenName, equals(givenName));
        expect(c.readingFamilyName, equals(familyReading));
        expect(c.readingGivenName, equals(givenReading));
        expect(c.telList.length, equals(2));
        expect(c.telList[0], equals(tel0));
        expect(c.telList[1], equals(tel1));
        expect(c.telAvList.length, equals(1));
        expect(c.telAvList[0], equals(telAv));
        expect(c.phoneNumberList.length, equals(3));
        expect(c.phoneNumberList[0], equals(tel0));
        expect(c.phoneNumberList[1], equals(tel1));
        expect(c.phoneNumberList[2], equals(telAv));
        expect(c.emailAddressList.length, equals(2));
        expect(c.emailAddressList[0], equals(email0));
        expect(c.emailAddressList[1], equals(email1));
        expect(c.memo, equals(memo));
        expect(c.birthday, equals(DateTime.utc(birthdayYear, birthdayMonth, birthdayDay)));
        expect(c.addressList.length, equals(2));
        expect(c.addressList[0].poBox, isNull);
        expect(c.addressList[0].roomNumber, equals(address0RoomNumber));
        expect(c.addressList[0].houseNumber, equals(address0HouseNumber));
        expect(c.addressList[0].city, equals(address0City));
        expect(c.addressList[0].prefecture, isNull);
        expect(c.addressList[0].zipCode, isNull);
        expect(c.addressList[0].country, equals(address0Country));
        expect(c.addressList[1].poBox, isNull);
        expect(c.addressList[1].roomNumber, equals(address1RoomNumber));
        expect(c.addressList[1].houseNumber, equals(address1HouseNumber));
        expect(c.addressList[1].city, equals(address1City));
        expect(c.addressList[1].prefecture, address1State);
        expect(c.addressList[1].zipCode, address1ZipCode);
        expect(c.addressList[1].country, equals(address1Country));
        expect(c.urlList.length, equals(2));
        expect(c.urlList[0], equals(url0));
        expect(c.urlList[1], equals(url1));
        expect(c.nickname, equals(nickname));
      }
      final c = MeCardContactCard.deserialize(serializedMeCard);
      verifyMeCard(c);
      final s = c.serialize();
      final cc = MeCardContactCard.deserialize(s);
      verifyMeCard(cc);
      final ss = cc.serialize();
      expect(s, equals(ss));
    });
  });
}
